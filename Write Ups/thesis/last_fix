let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/master-thesis/Write\ Ups/thesis
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 euf.tex
badd +1 references.bib
badd +1 euf_algorithm.tex
badd +1 main.tex
badd +1 algpseudocode.sty
badd +1 booktabs.sty
badd +2 abstract.tex
badd +5 preliminaries.tex
badd +136 craig_interpolation.tex
badd +35 first_order_logic.tex
badd +593 euf_implementation.tex
badd +1 a.tex
badd +2 modified_unsatisfiability_testing_for_grounded_horn_clauses.tex
badd +1 modified_congruence_closure_with_explanation_algorithms_merge.tex
badd +1 modified_congruence_closure_with_explanation_algorithms_propagate.tex
badd +62 euf_evaluation.tex
badd +1 euf_performance.tex
badd +1 euf_performance_2.tex
badd +6 euf_conclusion.tex
badd +7 octagonal.tex
badd +22 oct_abstract.tex
badd +1 euf_theorem.tex
badd +31 oct_algorithm.tex
badd +198 oct_implementation.tex
badd +73 oct_evaluation.tex
badd +1 oct_performance_1.tex
badd +2 oct_performance_2.tex
argglobal
%argdel
$argadd euf.tex
edit euf.tex
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 17 + 42) / 85)
exe 'vert 1resize ' . ((&columns * 41 + 146) / 293)
exe '2resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 2resize ' . ((&columns * 41 + 146) / 293)
exe '3resize ' . ((&lines * 46 + 42) / 85)
exe 'vert 3resize ' . ((&columns * 41 + 146) / 293)
exe '4resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 4resize ' . ((&columns * 20 + 146) / 293)
exe '5resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 5resize ' . ((&columns * 230 + 146) / 293)
exe '6resize ' . ((&lines * 55 + 42) / 85)
exe 'vert 6resize ' . ((&columns * 251 + 146) / 293)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 8 - ((0 * winheight(0) + 8) / 17)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
8
normal! 0
wincmd w
argglobal
if bufexists("main.tex") | buffer main.tex | else | edit main.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=1
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
10,110fold
10
normal! zc
let s:l = 2 - ((0 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2
normal! 0
wincmd w
argglobal
if bufexists("references.bib") | buffer references.bib | else | edit references.bib | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 109 - ((1 * winheight(0) + 23) / 46)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
109
normal! 018|
wincmd w
argglobal
if bufexists("octagonal.tex") | buffer octagonal.tex | else | edit octagonal.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 8 - ((1 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
8
normal! 03|
wincmd w
argglobal
if bufexists("euf_performance_2.tex") | buffer euf_performance_2.tex | else | edit euf_performance_2.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=2
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
99,101fold
99
normal! zc
let s:l = 8 - ((7 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
8
normal! 028|
wincmd w
argglobal
if bufexists("oct_performance_2.tex") | buffer oct_performance_2.tex | else | edit oct_performance_2.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 27) / 55)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
wincmd w
6wincmd w
exe '1resize ' . ((&lines * 17 + 42) / 85)
exe 'vert 1resize ' . ((&columns * 41 + 146) / 293)
exe '2resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 2resize ' . ((&columns * 41 + 146) / 293)
exe '3resize ' . ((&lines * 46 + 42) / 85)
exe 'vert 3resize ' . ((&columns * 41 + 146) / 293)
exe '4resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 4resize ' . ((&columns * 20 + 146) / 293)
exe '5resize ' . ((&lines * 27 + 42) / 85)
exe 'vert 5resize ' . ((&columns * 230 + 146) / 293)
exe '6resize ' . ((&lines * 55 + 42) / 85)
exe 'vert 6resize ' . ((&columns * 251 + 146) / 293)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
