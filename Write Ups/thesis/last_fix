let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/master-thesis/Write\ Ups/thesis
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +2 euf.tex
badd +1 references.bib
badd +256 euf_algorithm.tex
badd +1 main.tex
badd +1 algpseudocode.sty
badd +1 booktabs.sty
badd +2 abstract.tex
badd +4 preliminaries.tex
badd +140 craig_interpolation.tex
badd +10 first_order_logic.tex
badd +581 euf_implementation.tex
badd +1 a.tex
badd +2 modified_unsatisfiability_testing_for_grounded_horn_clauses.tex
badd +1 modified_congruence_closure_with_explanation_algorithms_merge.tex
badd +1 modified_congruence_closure_with_explanation_algorithms_propagate.tex
badd +60 euf_evaluation.tex
badd +1 euf_performance.tex
badd +95 euf_performance_2.tex
badd +14 euf_conclusion.tex
badd +7 octagonal.tex
badd +1 oct_abstract.tex
badd +1 euf_theorem.tex
badd +26 oct_algorithm.tex
badd +299 oct_implementation.tex
badd +74 oct_evaluation.tex
badd +1 oct_performance_1.tex
badd +64 oct_performance_2.tex
badd +4 combination.tex
badd +1 comb_abstract.tex
badd +1 comb_algorithm.tex
badd +2 comb_implementation.tex
badd +4 comb_evaluation.tex
badd +1 th_comb_example_interp.txt
badd +102 comb_performance.tex
badd +1 theories.tex
badd +1 comb_performance_2.tex
badd +288 comb_uniform.tex
badd +1 future_work.tex
badd +178 introduction.tex
badd +34 verification.tex
badd +5 sat-smt.tex
badd +80 congruence-closure.tex
badd +3 sat-horn.tex
badd +66 nelson-oppen-framework.tex
badd +171 tools.tex
badd +10 euf_abstract.tex
badd +6 oct_conclusion.tex
badd +11 comb_conclusion.tex
badd +119 appendix_a.tex
badd +1 appendix_b.tex
badd +1 appendix_c.tex
badd +1 \[Grammarous]
argglobal
%argdel
$argadd euf.tex
edit main.tex
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 27 + 28) / 56)
exe 'vert 1resize ' . ((&columns * 46 + 71) / 143)
exe '2resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 2resize ' . ((&columns * 46 + 71) / 143)
exe '3resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 3resize ' . ((&columns * 96 + 71) / 143)
exe '4resize ' . ((&lines * 27 + 28) / 56)
exe 'vert 4resize ' . ((&columns * 96 + 71) / 143)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=1
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
10,110fold
10
normal! zc
let s:l = 159 - ((13 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
159
normal! 0
wincmd w
argglobal
if bufexists("references.bib") | buffer references.bib | else | edit references.bib | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 016|
wincmd w
argglobal
if bufexists("combination.tex") | buffer combination.tex | else | edit combination.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 4 - ((3 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
4
normal! 0
wincmd w
argglobal
if bufexists("comb_abstract.tex") | buffer comb_abstract.tex | else | edit comb_abstract.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 55 - ((13 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
55
normal! 028|
wincmd w
4wincmd w
exe '1resize ' . ((&lines * 27 + 28) / 56)
exe 'vert 1resize ' . ((&columns * 46 + 71) / 143)
exe '2resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 2resize ' . ((&columns * 46 + 71) / 143)
exe '3resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 3resize ' . ((&columns * 96 + 71) / 143)
exe '4resize ' . ((&lines * 27 + 28) / 56)
exe 'vert 4resize ' . ((&columns * 96 + 71) / 143)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
