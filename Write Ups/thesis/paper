let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/master-thesis/Write\ Ups/thesis
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +81 main.tex
badd +8 abstract.tex
badd +1 background.tex
badd +9 preliminaries.tex
badd +172 introduction.tex
badd +666 references.bib
badd +338 unmeethesis.cls
badd +32 proof_of_main_theorem_octagons.tex
badd +42 octagonal.tex
badd +7 dedication_acknowledgments.tex
badd +3 related_work.tex
badd +3 glossary.tex
badd +33 euf.tex
badd +542 ~/Documents/GithubProjects/master-thesis/Write\ Ups/paper_project/main.tex
badd +1 ~/Documents/GithubProjects/master-thesis/Write\ Ups/paper_project/algpseudocode.sty
badd +68 first_order_logic.tex
badd +27 theories.tex
badd +32 verification.tex
badd +127 tools.tex
badd +27 combination.tex
badd +1 algpseudocode.sty
badd +15 ~/Downloads/10.1007_978-3-540-45069-6_1.bib
badd +102 craig_interpolation.tex
badd +53 sat-smt.tex
badd +80 congruence-closure.tex
badd +31 sat-horn.tex
badd +65 nelson-oppen-framework.tex
badd +2 ~/Downloads/10.2307_1990888.txt
badd +2 main.toc
badd +1 euf_architecture.tex
badd +10 utvpi_architecture.tex
badd +1 general_architecture.tex
badd +1 bussproofs.sty
badd +18 future_work.tex
badd +82 euf_algorithm.tex
badd +315 euf_implementation.tex
badd +3 ~/Downloads/10.1007_978-3-642-02959-2_15.bib
badd +15 euf_theorem.tex
badd +7 python_proof.tex
badd +1 ~/Downloads/10.1007_978-3-642-22119-4_1.bib
argglobal
%argdel
edit main.tex
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 29 + 30) / 60)
exe 'vert 1resize ' . ((&columns * 94 + 157) / 315)
exe '2resize ' . ((&lines * 28 + 30) / 60)
exe 'vert 2resize ' . ((&columns * 94 + 157) / 315)
exe 'vert 3resize ' . ((&columns * 220 + 157) / 315)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=1
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
10,79fold
10
normal! zc
let s:l = 80 - ((0 * winheight(0) + 14) / 29)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
80
normal! 0
wincmd w
argglobal
if bufexists("references.bib") | buffer references.bib | else | edit references.bib | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 708 - ((11 * winheight(0) + 14) / 28)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
708
normal! 010|
wincmd w
argglobal
if bufexists("combination.tex") | buffer combination.tex | else | edit combination.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 36 - ((35 * winheight(0) + 29) / 58)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
36
normal! 0
wincmd w
3wincmd w
exe '1resize ' . ((&lines * 29 + 30) / 60)
exe 'vert 1resize ' . ((&columns * 94 + 157) / 315)
exe '2resize ' . ((&lines * 28 + 30) / 60)
exe 'vert 2resize ' . ((&columns * 94 + 157) / 315)
exe 'vert 3resize ' . ((&columns * 220 + 157) / 315)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
