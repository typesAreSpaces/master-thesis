let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/master-thesis/Write\ Ups/thesis
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +27 main.tex
badd +8 abstract.tex
badd +1 background.tex
badd +4 preliminaries.tex
badd +172 introduction.tex
badd +550 references.bib
badd +338 unmeethesis.cls
badd +35 proof_of_main_theorem_octagons.tex
badd +14 octagonal.tex
badd +7 dedication_acknowledgments.tex
badd +3 related_work.tex
badd +3 glossary.tex
badd +1 euf.tex
badd +542 ~/Documents/GithubProjects/master-thesis/Write\ Ups/paper_project/main.tex
badd +1 ~/Documents/GithubProjects/master-thesis/Write\ Ups/paper_project/algpseudocode.sty
badd +68 first_order_logic.tex
badd +27 theories.tex
badd +21 verification.tex
badd +6 tools.tex
badd +28 combination.tex
badd +1 algpseudocode.sty
badd +15 ~/Downloads/10.1007_978-3-540-45069-6_1.bib
badd +102 craig_interpolation.tex
badd +105 sat-smt.tex
badd +48 congruence-closure.tex
badd +4 sat-horn.tex
badd +8 nelson-oppen-framework.tex
badd +2 ~/Downloads/10.2307_1990888.txt
badd +2 main.toc
argglobal
%argdel
edit references.bib
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe 'vert 1resize ' . ((&columns * 104 + 157) / 315)
exe '2resize ' . ((&lines * 22 + 34) / 69)
exe 'vert 2resize ' . ((&columns * 104 + 157) / 315)
exe '3resize ' . ((&lines * 22 + 34) / 69)
exe 'vert 3resize ' . ((&columns * 104 + 157) / 315)
exe '4resize ' . ((&lines * 21 + 34) / 69)
exe 'vert 4resize ' . ((&columns * 104 + 157) / 315)
exe '5resize ' . ((&lines * 33 + 34) / 69)
exe 'vert 5resize ' . ((&columns * 105 + 157) / 315)
exe '6resize ' . ((&lines * 33 + 34) / 69)
exe 'vert 6resize ' . ((&columns * 105 + 157) / 315)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 186 - ((23 * winheight(0) + 33) / 67)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
186
normal! 016|
wincmd w
argglobal
if bufexists("congruence-closure.tex") | buffer congruence-closure.tex | else | edit congruence-closure.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 6 - ((5 * winheight(0) + 11) / 22)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
6
normal! 06|
wincmd w
argglobal
if bufexists("sat-horn.tex") | buffer sat-horn.tex | else | edit sat-horn.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 11) / 22)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 047|
wincmd w
argglobal
if bufexists("nelson-oppen-framework.tex") | buffer nelson-oppen-framework.tex | else | edit nelson-oppen-framework.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 5 - ((4 * winheight(0) + 10) / 21)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
5
normal! 0
wincmd w
argglobal
if bufexists("verification.tex") | buffer verification.tex | else | edit verification.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=2
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
1,1fold
38,40fold
2,40fold
let s:l = 32 - ((24 * winheight(0) + 16) / 33)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
32
normal! 0
wincmd w
argglobal
if bufexists("euf.tex") | buffer euf.tex | else | edit euf.tex | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=4
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
39,44fold
48,48fold
49,50fold
45,54fold
55,63fold
64,78fold
102,109fold
110,116fold
91,135fold
136,238fold
239,270fold
27,270fold
271,274fold
275,282fold
1,282fold
1
normal! zo
27
normal! zo
39
normal! zc
45
normal! zo
48
normal! zc
49
normal! zc
45
normal! zc
55
normal! zc
64
normal! zc
91
normal! zo
102
normal! zc
110
normal! zc
136
normal! zc
239
normal! zc
271
normal! zc
275
normal! zc
let s:l = 93 - ((2 * winheight(0) + 16) / 33)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
93
normal! 013|
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 104 + 157) / 315)
exe '2resize ' . ((&lines * 22 + 34) / 69)
exe 'vert 2resize ' . ((&columns * 104 + 157) / 315)
exe '3resize ' . ((&lines * 22 + 34) / 69)
exe 'vert 3resize ' . ((&columns * 104 + 157) / 315)
exe '4resize ' . ((&lines * 21 + 34) / 69)
exe 'vert 4resize ' . ((&columns * 104 + 157) / 315)
exe '5resize ' . ((&lines * 33 + 34) / 69)
exe 'vert 5resize ' . ((&columns * 105 + 157) / 315)
exe '6resize ' . ((&lines * 33 + 34) / 69)
exe 'vert 6resize ' . ((&columns * 105 + 157) / 315)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
