usage: mathsat [options] [FILENAME]

If FILENAME is omitted, read from standard input.

Command-line specific options:
 -config=STR
          Load settings from the given configuration file.
 -dump_config=STR
          Dump current configuration settings into the given file (use "-" for 
          stdout). 
 -gc_period=INT
          If nonzero, perform garbage collection after every INT pop commands 
          (works only with -input=smt2). 
 -help
          Displays this help message.
 -input=STR
          Select input language. Can be `smt', `smt2' or 'dimacs' (default is 
          `smt2'). 
 -license
          Print license and exit.
 -model
          Print model for satisfiable formulae.
 -stats
          Print statistics at the end of the search.
 -unsat_core_tool=STR
          Path to an external group-oriented boolean unsat-core extractor. The 
          tool should accept a gcnf formula from standard input, and produce an 
          output (on stdout) conformant with the MUS track of the SAT 
          competition. For more details, see 
          http://satcompetition.org/2011/rules.pdf (requires 
          -unsat_core_generation=2). 
 -version
          Print version number and exit.

General options:
 -bool_model_generation=BOOL
          Enable a restricted form of model generation, that only assigns 
          values to the atoms seen by the DPLL engine. 
 -interpolation=BOOL
          Enable interpolation.
 -model_generation=BOOL
          Enable model generation.
 -proof_generation=BOOL
          Enable proof generation.
 -random_seed=INT
          Set seed for pseudo-random number generators.
 -unsat_core_generation=INT
          Enable unsat core generation. Possible values are:
          - 0 : turn off unsat core generation
          - 1 : use proof-based unsat core generation
          - 2 : use lemma-lifting algorithm.
 -verbosity=INT
          Set the vebosity level, between 0 and 2.

Debug options:
 -debug.api_call_trace=INT
          Enable API call tracing facility. Possible values are:
          - 0 : turn off tracing
          - 1 : trace as an SMT-LIB v2 script (with global declarations)
          - 2 : trace as a C source file
          - 3 : trace as an SMT-LIB v2 script (with scoped declarations)
 -debug.api_call_trace_dump_config=BOOL
          If true, include the current config settings in the trace of API 
          calls. 
 -debug.api_call_trace_filename=STR
          Name of the output file for API call tracing.If not given, stdout 
          will be used. 
 -debug.dump_theory_lemmas=BOOL
          If true, dump all the theory lemmas (in SMT-LIB v2 format) to files 
          called tlemma_XXX.smt2 in the current directory. 
 -debug.solver_enabled=BOOL
          If false, the solver will be disabled. This is useful e.g. in 
          combination with debug.api_call_trace to generate traces of queries 
          without actually solving them. 

Printer options:
 -printer.bv_number_format=INT
          Select the format for printing BV numbers. Possible values are:
          - 0 : decimal format
          - 1 : binary format
          - 2 : hexadecimal format (binary will be used if the bit-width is not 
          a multiple of 4). 
 -printer.defines_prefix=STR
          Custom prefix for defines/let bindings.
 -printer.fp_number_format=INT
          Select the format for printing BV numbers. Possible values are:
          - 0 : decimal representation of the BV encoding
          - 1 : binary representation of the BV encoding
          - 2 : decimal floating-point format.
 -printer.model_as_formula=BOOL
          If true, (get-model) will produce a formula instead of a list of 
          assignments. 

Preprocessor options:
 -preprocessor.interpolation_ite_elimination=BOOL
          If true, ensure that interpolants do not contain term-ITEs.
 -preprocessor.ite_minimization=BOOL
          Controls the use of agressive ite_minimization
 -preprocessor.ite_minimization_call_limit=INT
          Controls the maximum nr of calls made in ite minimization (0: 
          unlimited). 
 -preprocessor.partial_nnf_conversion=BOOL
          If true, apply (partial) NNF conversion before toplevel propagation.
 -preprocessor.simplification=INT
          Controls the kind of formula simplifications performed during 
          preprocessing. INT should be a bitwise-or of the following values: 
          - 0 : no simplification
          - 1 : generic Term-ITE simplifications
          - 2 : bit-vector specific simplifications
          - 4 : array-specific simplifications
          - 8 : global simplifications.
 -preprocessor.toplevel_propagation=BOOL
          Enable propagation of toplevel facts.
 -preprocessor.toplevel_propagation_limit=INT
          Limit on the number of iterations during toplevel propagation (0: 
          unlimited). 

DPLL options:
 -dpll.allsat_allow_duplicates=BOOL
          If true, allow duplicates in All-SAT enumeration.
 -dpll.allsat_minimize_model=BOOL
          Minimize propositional models before calling the All-SAT callback.
 -dpll.branching_cache_phase=INT
          Controls the kind of phase caching when branching on a variable. 
          Possible values are: 
          - 0: disable phase caching
          - 1: cache phase except for variables assigned at the last decision 
          level 
          - 2: always cache phase.
 -dpll.branching_initial_phase=INT
          Initial phase used when branching on a variable. Possible values are:
          - 0: false first
          - 1: true first
          - 2: according to polarity of the atom (true if variable occurs only 
          negatively in the formula, false otherwise). 
 -dpll.branching_random_frequency=FLOAT
          Frequency of random case splits.
 -dpll.branching_random_ignore_polarity=BOOL
          If true, use random polarity when performing random branching.
 -dpll.branching_random_invalidate_phase_cache=BOOL
          If true, invalidate the phase cache of selected variables when 
          performing random branching. 
 -dpll.ghost_filtering=BOOL
          If true, enable ghost literal filtering.
 -dpll.glucose_learnt_minimization=BOOL
          Use the Glucose learnt clause minimization heuristic.
 -dpll.glucose_var_activity=BOOL
          Use the Glucose var activity update heuristic.
 -dpll.interpolation_mode=INT
          Select the propositional interpolation algorithm to use. Possible 
          values are: 
          - 0 : McMillan's algorithm
          - 1 : symmetric algorithm
          - 2 : inverse McMillan.
 -dpll.minimize_model=BOOL
          Minimize propositional models.
 -dpll.pop_btpoint_reset_var_order=BOOL
          If true, reset variable ordering when popping a backtracking point.
 -dpll.preprocessor.clause_size_limit=INT
          The maximum size of created simplified clauses.
 -dpll.preprocessor.elimination_grow_limit=INT
          The allowed increase in the number of clauses when eliminating a 
          variable. 
 -dpll.preprocessor.elimination_phase=INT
          In an incremental setting, controls how often variable elimination is 
          perfored (1 means every sat check, 2 every other check, and so on). 
 -dpll.preprocessor.elimination_recent_vars_only=BOOL
          In an incremental setting, if true elimination is tried only for 
          newly-pushed variables. 
 -dpll.preprocessor.mode=INT
          Selects which SAT-level preprocessing mode to use. Possible values 
          are: 
          - 0 : off
          - 1 : preprocessing
          - 2 : inprocessing.
 -dpll.preprocessor.subsumption_size_limit=INT
          The maximum size of clauses for which subsumption is echecked.
 -dpll.preprocessor.try_reelimination=BOOL
          In an incremental setting, controls the re-elimination of pushed 
          eliminated variables. 
 -dpll.proof_simplification=BOOL
          If true, perform proof simplification before computing interpolants.
 -dpll.restart_geometric_factor=FLOAT
          Multiplicative factor to use for the geometric strategy.
 -dpll.restart_initial=INT
          With the geometric strategy, perform first restart after INT 
          conflict. For the Luby strategy, this is the Luby unit. 
 -dpll.restart_strategy=INT
          Restart strategy. Possible values are:
          - 0 : geometric strategy
          - 1 : frequent restart strategy based on Luby sequence
          - 2 : like 1, but adjust dynamically the Luby unit according to 
          agility 
          - 3 : use the dynamic restart strategy of the Glucose SAT solver.
 -dpll.store_tlemmas=BOOL
          Store all the T-lemmas generated during search, so that it is 
          possible to retrieve them. 

Theory options:
 -theory.arr.auto_wr_lemma=BOOL
          Allow array writes to automatically generate internal read in array 
          solver. 
 -theory.arr.check_on_approx=BOOL
          Allow array lemma instantiation on non-complete calls.
 -theory.arr.enable_ext_arg=BOOL
          Enable ext_arg condition for Ext lemma instantiation.
 -theory.arr.enable_ext_lemmas=BOOL
          Enable generation of extensionality lemmas.
 -theory.arr.enable_ext_polarity=BOOL
          Check for pure literals during Ext lemma generation.
 -theory.arr.enable_foreign=BOOL
          Enable foreign set for Ext lemma instantiation.
 -theory.arr.enable_nonlinear=BOOL
          Enable nonlinear set for RoW lemma instantiation.
 -theory.arr.enable_nonlinear_strat=BOOL
          Enable nonlinear-stratification set for RoW lemma instantiation.
 -theory.arr.enable_row_lemmas=BOOL
          Enable generation of read-over-write lemmas.
 -theory.arr.enable_witness=BOOL
          Enable witness set for Ext lemma instantiation.
 -theory.arr.enable_wr_lemmas=BOOL
          Enable generation of write lemmas.
 -theory.arr.enabled=BOOL
          If false, the array solver will be disabled.
 -theory.arr.lazy_lemmas=BOOL
          Lazy versus eager array lemma instantiation, when true, lemmas are 
          instantiated in a lazy fashion. 
 -theory.arr.max_ext_lemmas=INT
          Restrict the number of extensionality lemmas generated at each check 
          (0 means unrestricted). 
 -theory.arr.max_row_lemmas=INT
          Restrict the number of read-over-write lemmas generated at each check 
          (0 means unrestricted). 
 -theory.arr.max_wr_lemmas=INT
          Restrict the number of write lemmas generated at each check (0 means 
          unrestricted). 
 -theory.arr.mode=INT
          Select the kind of array solver to use. Possible values are:
          - 0 : lazy axiom instantiation
          - 1 : Boolector-style lemmas-on-demand.
 -theory.arr.permanent_lemma_inst=BOOL
          Set instantiated array lemmas as permanent, they cannot be 
          backtracked. 
 -theory.bv.bit_blast_mode=INT
          Controls the way in which BV constraints are bit-blasted. Possible 
          values are: 
          - 0 : bit blast directly in CNF
          - 1 : use intermediate AIG representation and Tseitin CNF conversion
          - 2 : use intermediate AIG representation and CNF conversion with 
          logic syntesis. 
 -theory.bv.delay_propagated_eqs=BOOL
          If true, equalities propagated by the EUF solver will be given lower 
          priority than other literals when checking satisfiability. 
 -theory.bv.div_by_zero_mode=INT
          Select the semantics used for division (and remainder) by zero. 
          Possible values are: 
          - 0 : use the semantics commonly implemented by hardware dividers, 
          i.e. (bvudiv a 0) returns INT_MAX and (bvurem a 0) returns a 
          - 1 : use an uninterpreted function to leave the result unspecified 
          (this is the semantics mandated by SMT-LIB). 
 -theory.bv.eager=BOOL
          If true, BV atoms will be bit-blasted into the main DPLL solver.
 -theory.bv.enabled=BOOL
          If false, the BV solver will be disabled.
 -theory.bv.interpolation_mode=INT
          Interpolation technique to use for bit-vectors. Possible values are:
          - 0 : equality substitution + LA(Z) encoding  + bit-level 
          interpolation 
          - 1 : LA(Z) encoding + bit-level interpolation
          - 2 : bit-level interpolation only
          - 3 : LA(Z) encoding + equality substitution + bit-level interpolation
          - 4 : equality substitution + bit-level interpolation.
 -theory.bv.lazydpll.branching_cache_phase=INT
          "dpll.branching_cache_phase" option for the inner DPLL solver used by 
          BV in lazy mode. 
 -theory.bv.lazydpll.branching_initial_phase=INT
          "dpll.branching_initial_phase" option for the inner DPLL solver used 
          by BV in lazy mode. 
 -theory.bv.lazydpll.branching_random_frequency=FLOAT
          "dpll.branching_random_frequency" option for the inner DPLL solver 
          used by BV in lazy mode. 
 -theory.bv.lazydpll.branching_random_ignore_polarity=BOOL
          "dpll.branching_random_ignore_polarity" option for the inner DPLL 
          solver used by BV in lazy mode. 
 -theory.bv.lazydpll.branching_random_invalidate_phase_cache=BOOL
          "dpll.branching_random_invalidate_phase_cache" option for the inner 
          DPLL solver used by BV in lazy mode. 
 -theory.bv.lazydpll.ghost_filtering=BOOL
          "dpll.ghost_filtering" option for the inner DPLL solver used by BV in 
          lazy mode. 
 -theory.bv.lazydpll.glucose_learnt_minimization=BOOL
          "dpll.glucose_learnt_minimization" option for the inner DPLL solver 
          used by BV in lazy mode. 
 -theory.bv.lazydpll.glucose_var_activity=BOOL
          "dpll.glucose_var_activity" option for the inner DPLL solver used by 
          BV in lazy mode. 
 -theory.bv.lazydpll.restart_geometric_factor=FLOAT
          "dpll.restart_geometric_factor" option for the inner DPLL solver used 
          by BV in lazy mode. 
 -theory.bv.lazydpll.restart_initial=INT
          "dpll.restart_initial" option for the inner DPLL solver used by BV in 
          lazy mode. 
 -theory.bv.lazydpll.restart_strategy=INT
          "dpll.restart_strategy" option for the inner DPLL solver used by BV 
          in lazy mode. 
 -theory.bv.proof_simplification=BOOL
          If true, perform proof simplification before computing interpolants.
 -theory.eq_propagation=BOOL
          Enable intra-theory equality propagation.
 -theory.euf.dyn_ack=INT
          Dynamic Ackermann expansion. Possible values are:
          - 0 : off
          - 1 : use only toplevel congruences
          - 2 : use all congruences.
 -theory.euf.dyn_ack_limit=INT
          Max number of dynamic Ackermann lemmas active at the same time.
 -theory.euf.dyn_ack_threshold=INT
          Number of times a congruence rule should occur in a conflict before 
          the corresponding dynamic Ackermann lemma is generated. 
 -theory.euf.enabled=BOOL
          if false, the EUF solver will be disabled.
 -theory.fp.acdcl_conflict_generalization=INT
          Select the kind of conflict generalization to use in the ACDCL-based 
          solver. Possible values are: 
          - 0: no conflict analysis or generalization
          - 1: conflict-driven learning and backjumping, but no generalization
          - 2: 1 + cheap conflict generalization
          - 3: 1 + aggressive conflict generalization.
 -theory.fp.acdcl_generalization_fair=BOOL
          If true, use a fair strategy for conflict generalization in the 
          ACDCL-based solver. 
 -theory.fp.acdcl_single_generalization_limit=INT
          Limit on the number of generalization attempts performed on a single 
          variable in the ACDCL-based solver (0 means unlimited). 
 -theory.fp.acdcl_single_propagation_limit=INT
          Limit on the number of subsequent propagations performed on the same 
          variable in the ACDCL-based solver (0 means unlimited). 
 -theory.fp.bit_blast_mode=INT
          Controls the way in which FP constraints are bit-blasted. Possible 
          values are: 
          - 0 : bit blast directly in CNF
          - 1 : use intermediate AIG representation and Tseitin CNF conversion
          - 2 : use intermediate AIG representation and CNF conversion with 
          logic syntesis. 
 -theory.fp.bv_combination_enabled=BOOL
          If true, enable support for theory combination between FP and BV.
 -theory.fp.dpll.branching_cache_phase=INT
          "dpll.branching_cache_phase" option for the inner DPLL solver used by 
          FP. 
 -theory.fp.dpll.branching_initial_phase=INT
          "dpll.branching_initial_phase" option for the inner DPLL solver used 
          by FP. 
 -theory.fp.dpll.branching_random_frequency=FLOAT
          "dpll.branching_random_frequency" option for the inner DPLL solver 
          used by FP. 
 -theory.fp.dpll.branching_random_ignore_polarity=BOOL
          "dpll.branching_random_ignore_polarity" option for the inner DPLL 
          solver used by FP. 
 -theory.fp.dpll.branching_random_invalidate_phase_cache=BOOL
          "dpll.branching_random_invalidate_phase_cache" option for the inner 
          DPLL solver used by FP. 
 -theory.fp.dpll.ghost_filtering=BOOL
          "dpll.ghost_filtering" option for the inner DPLL solver used by FP.
 -theory.fp.dpll.glucose_learnt_minimization=BOOL
          "dpll.glucose_learnt_minimization" option for the inner DPLL solver 
          used by FP. 
 -theory.fp.dpll.glucose_var_activity=BOOL
          "dpll.glucose_var_activity" option for the inner DPLL solver used by 
          FP. 
 -theory.fp.dpll.restart_geometric_factor=FLOAT
          "dpll.restart_geometric_factor" option for the inner DPLL solver used 
          by FP. 
 -theory.fp.dpll.restart_initial=INT
          "dpll.restart_initial" option for the inner DPLL solver used by FP.
 -theory.fp.dpll.restart_strategy=INT
          "dpll.restart_strategy" option for the inner DPLL solver used by FP.
 -theory.fp.enabled=BOOL
          If false, the FP solver will be disabled.
 -theory.fp.interpolation_mode=INT
          Select the interpolation mode for the ACDCL-based FP solver. Possible 
          values are: 
          - 0: equality inlining + ACDCL-based interpolation with McMillan's 
          algorithm 
          - 1: ACDCL-based interpolation with McMillan's algorithm only
          - 2: equality inlining + ACDCL-based interpolation with symmetric 
          algorithm 
          - 3: ACDCL-based interpolation with symmetric algorithm only
          - 4: equality inlining + ACDCL-based interpolation with inverse 
          McMillan algorithm 
          - 5: ACDCL-based interpolation with inverse McMillan algorithm only.
 -theory.fp.minmax_zero_mode=INT
          Select the semantics used for fp.min and fp.max when one argument is 
          +0 and the other is -0. Possible values are: 
          - 0 : fp.min returns -0, fp.max returns +0
          - 1 : always return +0
          - 2 : always return the first argument
          - 3 : always return the second argument
          - 4 : use an uninterpreted function to leave the result unspecified, 
          i.e. either +0 or -0 (this is the semantics mandated by SMT-LIB). 
 -theory.fp.mode=INT
          Select which FP solver to use. Possible values are:
          - 0 : BV encoding with lazy bit-blasting
          - 1 : BV encoding with eager bit-blasting
          - 2 : ACDCL with interval domain.
 -theory.interface_eq_batch_size=INT
          max number of interface equalities to generate in a single batch (0: 
          unlimited). 
 -theory.interface_eq_policy=INT
          Strategy for generating interface equalities for theory combinations. 
          Possible values are: 
          - 0 : lazy generation
          - 1 : eager generation
          - 2 : heuristic generation based on equalities considered 
          "interesting" by the theory solvers 
          - 3 : turn off generation of interface equalities completely.
 -theory.la.deduction_enabled=BOOL
          If false, disable LA theory deduction.
 -theory.la.delay_alien=BOOL
          Delay alien terms in the LA solver.
 -theory.la.detect_euf_fragment=BOOL
          If true, detect problems that can be solved by EUF only, and avoid 
          calling the LA solver. Warning: theory.euf.enabled must be set to 
          true, otherwise the solver is unsound. 
 -theory.la.enabled=BOOL
          if false, the LA solver will be disabled.
 -theory.la.interpolation_laz_use_floor=BOOL
          If true, allow floor functions in interpolants in LA(Z).
 -theory.la.interpolation_mode=INT
          Interpolation technique to use for LA. Possible values are:
          - 0 : single summaries from A
          - 1 : multiple summaries from A
          - 2 : single negated summaries from B.
 -theory.la.laz_cuts_from_proofs_mode=INT
          Controls the use of the "cuts from proofs" algorithm for extended 
          branch and bound lemmas. Possible values are: 
          - 0 : off
          - 1 : always enabled
          - 2 : enabled only for external branch and bound
          - 3 : external with branching on equalities over defining constraints.
 -theory.la.laz_enabled=BOOL
          If false, the LA(Z) solver will be disabled.
 -theory.la.laz_equality_elimination=BOOL
          If true, enable the equality elimination step for LA(Z).
 -theory.la.laz_internal_branch_and_bound=BOOL
          If true, enable the internal branch and bound for LA(Z).
 -theory.la.laz_internal_branch_and_bound_limit=INT
          Limit on internal branch and bound case splits. 0 means unlimited, 
          and 1 means a value proportional to the number of variables in the 
          problem. 
 -theory.la.laz_unit_cube_test=BOOL
          If false, disable the unit cube test heuristic for finding integer 
          solutions. 
 -theory.la.lazy_expl_threshold=INT
          Threshold for lazy explanation generation of LA implications.
 -theory.la.pivoting_greedy_threshold=INT
          Threshold for switching from a "greedy" pivoting strategy to the 
          Bland's rule in the Simplex. A value of 0 means to use a value 
          proportional to the number of problem variables. 
 -theory.la.pure_equality_filtering=BOOL
          If true, filter negated equalities occurring purely positively in the 
          input formula, regardless of the value of 
          theory.pure_literal_filtering. 
 -theory.la.split_rat_eq=BOOL
          Split rational equalities into inequalities instead of handling 
          disequalities directly. 
 -theory.pairwise_interface_eq=BOOL
          If true, filter-out interface equalities between variables that do 
          not occur in the same position as arguments of the same uninterpreted 
          function. 
 -theory.pure_literal_filtering=BOOL
          Enable pure literal filtering.
