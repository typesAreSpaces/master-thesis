g++ -g -c -o obj/ThCombInterpolator.o -I./src -I./include -std=c++11 -Wall -DDISJ_EQS_PROPAGATOR_NO_AB_MIXED_EQS -DADD_COMMON_PREFIX src/ThCombInterpolator.cpp
g++ -g -c -o ./tests/basic_test.o -I./src -I./include -std=c++11 -Wall -DDISJ_EQS_PROPAGATOR_NO_AB_MIXED_EQS -DADD_COMMON_PREFIX ./tests/basic_test.cpp
g++ -g -o tests/basic_test  ./obj/Bound.o  ./obj/Bounds.o  ./obj/CDCL_T.o  ./obj/CongruenceClosure.o  ./obj/CongruenceClosureDST.o  ./obj/CongruenceClosureExplain.o  ./obj/CongruenceClosureNO.o  ./obj/CurryNode.o  ./obj/DisjEqsPropagator.o  ./obj/EUFInterpolant-conditionalEliminationEqs.o  ./obj/EUFInterpolant-conditionalEliminationHcs.o  ./obj/EUFInterpolant.o  ./obj/EUFInterpolantWithExpressions.o  ./obj/EUFInterpolantWithUncomSymbols.o  ./obj/Explanation.o  ./obj/FactoryCurryNodes.o  ./obj/HornClause.o  ./obj/HornClauses.o  ./obj/Hornsat.o  ./obj/Input.o  ./obj/Octagon.o  ./obj/OctagonInterpolant.o  ./obj/OctagonInterpolantWithExpressions.o  ./obj/OctagonInterpolantWithUncomSymbols.o  ./obj/OctagonParser.o  ./obj/OctagonTerm.o  ./obj/PicoSATProofFactory.o  ./obj/ProofFactory.o  ./obj/Purifier.o  ./obj/Rename.o  ./obj/RenameWithExpressions.o  ./obj/RenameWithUncomSymbols.o  ./obj/ThCombInterpolator.o  ./obj/ThCombInterpolatorWithExpressions.o  ./obj/UnionFind.o  ./obj/UnionFindExplain.o  ./obj/Util.o  ./obj/VarPositions.o  ./obj/Z3Subterms.o /home/jose/Documents/GithubProjects/z3__/build/libz3.so  ./tests/basic_test.o -lpthread -Wall
./tests/basic_test
Part a
EUF-component
(= (a_f c_x) c_oct_1)
(distinct (a_f c_oct_2) c_oct_1)
(distinct (a_f c_oct_3) c_oct_1)
Octagon-component
(<= 1 c_x)
(= 3 c_oct_1)
(= 1 c_oct_2)
(= 2 c_oct_3)
Part b
EUF-component
Octagon-component
(<= c_x 2)
Shared variables
(ast-vector
  c_x
  c_oct_1
  c_oct_2
  c_oct_3)
(<= 1 c_x)
(= 3 c_oct_1)
(= 1 c_oct_2)
(= 2 c_oct_3)
(<= c_x 2)
(= (a_f c_x) c_oct_1)
(not (= (a_f c_oct_2) c_oct_1))
(not (= (a_f c_oct_3) c_oct_1))

Disjunction implied in OCT: (or (= c_x c_oct_2) (= c_x c_oct_3))
Clause Id: 1 (Fact) Predicate: (<= 1 c_x) Interpolant(old): false
Clause Id: 3 (Fact) Predicate: (= 1 c_oct_2) Interpolant(old): false
Clause Id: 4 (Fact) Predicate: (= 2 c_oct_3) Interpolant(old): false
Clause Id: 5 (Fact) Predicate: (<= c_x 2) Interpolant(old): true
Clause Id: 6 (Fact) Predicate: (not (= c_x c_oct_2)) Interpolant(new): false
Clause Id: 7 (Fact) Predicate: (not (= c_x c_oct_3)) Interpolant(new): false
Clause Id: 8 (Conflict Clause) Predicate: (or (not (<= 1 c_x))
    (not (= 1 c_oct_2))
    (not (= 2 c_oct_3))
    (not (<= c_x 2))
    (= c_x c_oct_2)
    (= c_x c_oct_3))
Inside partialInterpolantConflict
Case OCT
(ast-vector
  (<= 1 c_x)
  (= 1 c_oct_2)
  (= 2 c_oct_3)
  (<= c_x 2)
  (not (= c_x c_oct_2))
  (not (= c_x c_oct_3)))
----- Hmm ---- (ast-vector
  (<= 1 c_x)
  (= 1 c_oct_2)
  (= 2 c_oct_3)
  (not (= c_x c_oct_2))
  (not (= c_x c_oct_3)))
-------It was sat!
(ast-vector
  (<= 1 c_x)
  (= 1 c_oct_2)
  (= 2 c_oct_3)
  (not (= c_x c_oct_2))
  (not (= c_x c_oct_3)))
(ast-vector
  (<= c_x 2))
DNF: (let ((a!1 (and (<= (- c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_2) (- 1))
                (<= c_oct_3 2)
                (<= (- c_oct_3) (- 2))
                (<= (- c_x c_oct_2) (- 1))
                (<= (+ (- c_x) c_oct_3) (- 1))))
      (a!2 (and (<= (- c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_2) (- 1))
                (<= c_oct_3 2)
                (<= (- c_oct_3) (- 2))
                (<= (+ (- c_x) c_oct_2) (- 1))
                (<= (- c_x c_oct_3) (- 1))))
      (a!3 (and (<= (- c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_2) (- 1))
                (<= c_oct_3 2)
                (<= (- c_oct_3) (- 2))
                (<= (+ (- c_x) c_oct_2) (- 1))
                (<= (+ (- c_x) c_oct_3) (- 1)))))
  (or (and (<= (- c_x) (- 1))
           (<= c_oct_2 1)
           (<= (- c_oct_2) (- 1))
           (<= c_oct_3 2)
           (<= (- c_oct_3) (- 2))
           (<= (- c_x c_oct_2) (- 1))
           (<= (- c_x c_oct_3) (- 1)))
      a!1
      a!2
      a!3))
Input for OctagonInterpolant (ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (- c_x c_oct_2) (- 1))
  (<= (- c_x c_oct_3) (- 1)))
assertion @ src/OctagonParser.cpp (<= (- c_x) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_2 1)
assertion @ src/OctagonParser.cpp (<= (- c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_3 2)
assertion @ src/OctagonParser.cpp (<= (- c_oct_3) (- 2))
assertion @ src/OctagonParser.cpp (<= (- c_x c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= (- c_x c_oct_3) (- 1))
(ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (- c_x c_oct_2) (- 1))
  (<= (- c_x c_oct_3) (- 1)))
Removing this var: 0
Removing this var: 1
Removing this var: 2
Removing this var: 3
-------ahh
Input for OctagonInterpolant (ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (- c_x c_oct_2) (- 1))
  (<= (+ (- c_x) c_oct_3) (- 1)))
assertion @ src/OctagonParser.cpp (<= (- c_x) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_2 1)
assertion @ src/OctagonParser.cpp (<= (- c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_3 2)
assertion @ src/OctagonParser.cpp (<= (- c_oct_3) (- 2))
assertion @ src/OctagonParser.cpp (<= (- c_x c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= (+ (- c_x) c_oct_3) (- 1))
(ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (- c_x c_oct_2) (- 1))
  (<= (+ (- c_x) c_oct_3) (- 1)))
Removing this var: 0
Removing this var: 1
Removing this var: 2
Removing this var: 3
-------ahh
Input for OctagonInterpolant (ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (+ (- c_x) c_oct_2) (- 1))
  (<= (- c_x c_oct_3) (- 1)))
assertion @ src/OctagonParser.cpp (<= (- c_x) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_2 1)
assertion @ src/OctagonParser.cpp (<= (- c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_3 2)
assertion @ src/OctagonParser.cpp (<= (- c_oct_3) (- 2))
assertion @ src/OctagonParser.cpp (<= (+ (- c_x) c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= (- c_x c_oct_3) (- 1))
(ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (+ (- c_x) c_oct_2) (- 1))
  (<= (- c_x c_oct_3) (- 1)))
Removing this var: 0
Removing this var: 1
Removing this var: 2
Removing this var: 3
-------ahh
Input for OctagonInterpolant (ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (+ (- c_x) c_oct_2) (- 1))
  (<= (+ (- c_x) c_oct_3) (- 1)))
assertion @ src/OctagonParser.cpp (<= (- c_x) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_2 1)
assertion @ src/OctagonParser.cpp (<= (- c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= c_oct_3 2)
assertion @ src/OctagonParser.cpp (<= (- c_oct_3) (- 2))
assertion @ src/OctagonParser.cpp (<= (+ (- c_x) c_oct_2) (- 1))
assertion @ src/OctagonParser.cpp (<= (+ (- c_x) c_oct_3) (- 1))
(ast-vector
  (<= (- c_x) (- 1))
  (<= c_oct_2 1)
  (<= (- c_oct_2) (- 1))
  (<= c_oct_3 2)
  (<= (- c_oct_3) (- 2))
  (<= (+ (- c_x) c_oct_2) (- 1))
  (<= (+ (- c_x) c_oct_3) (- 1)))
Removing this var: 0
Removing this var: 1
Removing this var: 2
Removing this var: 3
-------ahh
Theory-specific interpolant: (let ((a!1 (and (<= (- c_x) (- 1))
                (<= (- c_oct_2) (- 1))
                (<= (+ (- c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_3) (- 2))
                (<= (+ (- c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (<= (- c_x) (- 1))
                (<= (- c_oct_2) (- 1))
                (<= (+ (- c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_3) (- 2))
                (<= c_oct_3 2)
                (<= (- c_oct_3 c_x) (- 1))))
      (a!3 (and (<= (- c_x) (- 1))
                (<= (- c_oct_2) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_2 c_x) (- 1))
                (<= (- c_oct_3) (- 2))
                (<= (+ (- c_oct_3) c_x) (- 1))
                (<= c_oct_3 2))))
  (or a!1
      a!2
      a!3
      (and (<= (- c_x) (- 1))
           (<= (- c_oct_2) (- 1))
           (<= c_oct_2 1)
           (<= (- c_oct_2 c_x) (- 1))
           (<= (- c_oct_3) (- 2))
           (<= c_oct_3 2)
           (<= (- c_oct_3 c_x) (- 1)))))
Interpolant for OCT: (let ((a!1 (and (<= (- c_x) (- 1))
                (<= (- c_oct_2) (- 1))
                (<= (+ (- c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_3) (- 2))
                (<= (+ (- c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (<= (- c_x) (- 1))
                (<= (- c_oct_2) (- 1))
                (<= (+ (- c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_3) (- 2))
                (<= c_oct_3 2)
                (<= (- c_oct_3 c_x) (- 1))))
      (a!3 (and (<= (- c_x) (- 1))
                (<= (- c_oct_2) (- 1))
                (<= c_oct_2 1)
                (<= (- c_oct_2 c_x) (- 1))
                (<= (- c_oct_3) (- 2))
                (<= (+ (- c_oct_3) c_x) (- 1))
                (<= c_oct_3 2))))
(let ((a!4 (or a!1
               a!2
               a!3
               (and (<= (- c_x) (- 1))
                    (<= (- c_oct_2) (- 1))
                    (<= c_oct_2 1)
                    (<= (- c_oct_2 c_x) (- 1))
                    (<= (- c_oct_3) (- 2))
                    (<= c_oct_3 2)
                    (<= (- c_oct_3 c_x) (- 1)))
               false
               false
               false
               false
               false)))
  (and a!4 true)))
Interpolant((from conflict)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
  (or a!1 a!2 a!3 a!4))
Clause Id: 9 (Derived(1,8)) Predicate: (or (not (= 1 c_oct_2))
    (not (= 2 c_oct_3))
    (not (<= c_x 2))
    (= c_x c_oct_2)
    (= c_x c_oct_3)) Pivot: (<= 1 c_x)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
  (and (or (<= 1 c_x) false) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4)))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
  (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4)))
Clause Id: 10 (Derived(9,3)) Predicate: (or (= c_x c_oct_3) (not (= 2 c_oct_3)) (not (<= c_x 2)) (= c_x c_oct_2)) Pivot: (= 1 c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!6 (or (not (not (= 1 c_oct_2))) false)))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
  (and (or (not (= 1 c_oct_2)) a!5) a!6)))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
  (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
Clause Id: 11 (Derived(10,4)) Predicate: (or (= c_x c_oct_3) (= c_x c_oct_2) (not (<= c_x 2))) Pivot: (= 2 c_oct_3)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!7 (or (not (not (= 2 c_oct_3))) false)))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
  (and (or (not (= 2 c_oct_3)) a!6) a!7))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
  (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3)))))
Clause Id: 12 (Derived(11,5)) Predicate: (or (= c_x c_oct_3) (= c_x c_oct_2)) Pivot: (<= c_x 2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!8 (or (not (not (<= c_x 2))) true)))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
  (and (or (not (<= c_x 2)) a!7) a!8)))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
  (or (not (<= c_x 2)) a!7)))))
Clause Id: 13 (Derived(12,6)) Predicate: (= c_x c_oct_3) Pivot: (= c_x c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
  (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7)
       (or (not (= c_x c_oct_2)) false))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
  (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))))
Clause Id: 14 (Derived(13,7)) Predicate: false Pivot: (= c_x c_oct_3)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
  (and (or (= c_x c_oct_3) a!8) (or (not (= c_x c_oct_3)) false)))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
  (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))))
Final interpolant for conflict clause: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
  (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))))
EUF solver found a contradiction
(ast-vector
  (= (a_f c_x) c_oct_1)
  (not (= (a_f c_oct_2) c_oct_1))
  (not (= (a_f c_oct_3) c_oct_1))
  (or (= c_x c_oct_2) (= c_x c_oct_3)))
Clause Id: 1 (Fact) Predicate: (= (a_f c_x) c_oct_1) Interpolant(old): false
Clause Id: 2 (Fact) Predicate: (not (= (a_f c_oct_2) c_oct_1)) Interpolant(old): false
Clause Id: 3 (Fact) Predicate: (not (= (a_f c_oct_3) c_oct_1)) Interpolant(old): false
Clause Id: 4 (Fact) Predicate: (or (= c_x c_oct_2) (= c_x c_oct_3)) Interpolant(old): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
  (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))))
Clause Id: 5 (Conflict Clause) Predicate: (or (= (a_f c_oct_2) c_oct_1) (not (= (a_f c_x) c_oct_1)) (not (= c_x c_oct_2)))
Inside partialInterpolantConflict
Case EUF
Part a: (ast-vector
  (distinct (a_f c_oct_2) c_oct_1)
  (= (a_f c_x) c_oct_1)
  (= c_x c_oct_2))
Part b: (ast-vector)
Interpolant((from conflict)new): false
Clause Id: 6 (Conflict Clause) Predicate: (or (= (a_f c_oct_3) c_oct_1) (not (= (a_f c_x) c_oct_1)) (not (= c_x c_oct_3)))
Inside partialInterpolantConflict
Case EUF
Part a: (ast-vector
  (distinct (a_f c_oct_3) c_oct_1)
  (= (a_f c_x) c_oct_1)
  (= c_x c_oct_3))
Part b: (ast-vector)
Interpolant((from conflict)new): false
Clause Id: 7 (Derived(1,6)) Predicate: (or (= (a_f c_oct_3) c_oct_1) (not (= c_x c_oct_3))) Pivot: (= (a_f c_x) c_oct_1)
Pivot is A-local
Partial interpolant (or false false)
Interpolant((from derived)new): false
Clause Id: 8 (Derived(7,3)) Predicate: (not (= c_x c_oct_3)) Pivot: (= (a_f c_oct_3) c_oct_1)
Pivot is A-local
Partial interpolant (or false false)
Interpolant((from derived)new): false
Clause Id: 9 (Derived(1,5)) Predicate: (or (= (a_f c_oct_2) c_oct_1) (not (= c_x c_oct_2))) Pivot: (= (a_f c_x) c_oct_1)
Pivot is A-local
Partial interpolant (or false false)
Interpolant((from derived)new): false
Clause Id: 10 (Derived(9,2)) Predicate: (not (= c_x c_oct_2)) Pivot: (= (a_f c_oct_2) c_oct_1)
Pivot is A-local
Partial interpolant (or false false)
Interpolant((from derived)new): false
Clause Id: 11 (Derived(10,4)) Predicate: (= c_x c_oct_3) Pivot: (= c_x c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
(let ((a!9 (or (not (not (= c_x c_oct_2)))
               (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))
  (and (or (not (= c_x c_oct_2)) false) a!9)))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
(let ((a!9 (or (= c_x c_oct_2)
               (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))
  (and (not (= c_x c_oct_2)) a!9)))))))
Clause Id: 12 (Derived(11,8)) Predicate: false Pivot: (= c_x c_oct_3)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
(let ((a!9 (or (= c_x c_oct_2)
               (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))
(let ((a!10 (or (= c_x c_oct_3) (and (not (= c_x c_oct_2)) a!9))))
  (and a!10 (or (not (= c_x c_oct_3)) false)))))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
(let ((a!9 (or (= c_x c_oct_2)
               (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))
(let ((a!10 (or (= c_x c_oct_3) (and (not (= c_x c_oct_2)) a!9))))
  (and a!10 (not (= c_x c_oct_3))))))))))
Final interpolant for conflict clause: (let ((a!1 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!2 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= (+ (* (- 1) c_oct_2) c_x) (- 1))
                (<= c_oct_2 1)
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1))))
      (a!3 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= (+ (* (- 1) c_oct_3) c_x) (- 1))
                (<= c_oct_3 2)))
      (a!4 (and (>= c_x 1)
                (>= c_oct_2 1)
                (<= c_oct_2 1)
                (<= (+ c_oct_2 (* (- 1) c_x)) (- 1))
                (>= c_oct_3 2)
                (<= c_oct_3 2)
                (<= (+ c_oct_3 (* (- 1) c_x)) (- 1)))))
(let ((a!5 (and (<= 1 c_x) (or (not (<= 1 c_x)) a!1 a!2 a!3 a!4))))
(let ((a!6 (and (or (not (= 1 c_oct_2)) a!5) (= 1 c_oct_2))))
(let ((a!7 (and (or (not (= 2 c_oct_3)) a!6) (= 2 c_oct_3))))
(let ((a!8 (and (or (= c_x c_oct_2) (not (<= c_x 2)) a!7) (not (= c_x c_oct_2)))))
(let ((a!9 (or (= c_x c_oct_2)
               (and (or (= c_x c_oct_3) a!8) (not (= c_x c_oct_3))))))
(let ((a!10 (or (= c_x c_oct_3) (and (not (= c_x c_oct_2)) a!9))))
  (and a!10 (not (= c_x c_oct_3))))))))))
-> Final Interpolant: (let ((a!1 (and (<= 1 c_x)
                (or (not (<= 1 c_x))
                    (and (>= c_x 1) (<= c_x 0) (<= c_x 1))
                    (and (>= c_x 1) (<= c_x 0) (>= c_x 3))
                    (and (>= c_x 1) (>= c_x 2) (<= c_x 1))
                    (and (>= c_x 1) (>= c_x 2) (>= c_x 3))))))
(let ((a!2 (and (or (not (<= c_x 2)) (= c_x 1) a!1) (not (= c_x 1)))))
(let ((a!3 (or (= c_x 1) (and (or (= c_x 2) a!2) (not (= c_x 2))))))
(let ((a!4 (or (= c_x 2) (and (not (= c_x 1)) a!3))))
  (and a!4 (not (= c_x 2)))))))
(let ((a!1 (and (<= 1 x)
                (or (not (<= 1 x))
                    (and (>= x 1) (<= x 0) (<= x 1))
                    (and (>= x 1) (<= x 0) (>= x 3))
                    (and (>= x 1) (>= x 2) (<= x 1))
                    (and (>= x 1) (>= x 2) (>= x 3))))))
(let ((a!2 (and (or (not (<= x 2)) (= x 1) a!1) (not (= x 1)))))
(let ((a!3 (or (= x 1) (and (or (= x 2) a!2) (not (= x 2))))))
(let ((a!4 (or (= x 2) (and (not (= x 1)) a!3))))
  (and a!4 (not (= x 2)))))))
rm -rf tests/*.o tests/basic_test
