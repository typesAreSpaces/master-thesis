Part a
EUF-component
(= (c_f c_x1) c_oct_1)
(= c_x1 a_a)
Octagon-component
(= 0 c_oct_1)
(<= c_y1 a_a)
Part b
EUF-component
(= c_y1 b_b)
(distinct (c_f c_y1) c_oct_2)
Octagon-component
(<= c_x1 b_b)
(= 0 c_oct_2)
Shared variables
(ast-vector
  c_x1
  a_a
  c_y1
  b_b
  c_oct_1
  c_oct_2)
(= 0 c_oct_1)
(<= c_y1 a_a)
(<= c_x1 b_b)
(= 0 c_oct_2)
(= (c_f c_x1) c_oct_1)
(= c_x1 a_a)
(= c_y1 b_b)
(not (= (c_f c_y1) c_oct_2))

Disjunction implied in EUF: (= c_x1 a_a)
Partial interpolant already computed

Disjunction implied in EUF: (= c_y1 b_b)
Partial interpolant already computed

Disjunction implied in OCT: (= c_x1 c_y1)
Clause Id: 2 (Fact) Predicate: (<= c_y1 a_a) Interpolant(old): false
Clause Id: 3 (Fact) Predicate: (<= c_x1 b_b) Interpolant(old): true
Clause Id: 5 (Fact) Predicate: (= c_x1 a_a) Interpolant(old): false
Clause Id: 6 (Fact) Predicate: (= c_y1 b_b) Interpolant(old): true
Clause Id: 7 (Fact) Predicate: (not (= c_x1 c_y1)) Interpolant(new): false
Clause Id: 8 (Conflict Clause) Predicate: (or (not (<= c_y1 a_a))
    (not (<= c_x1 b_b))
    (not (= c_x1 a_a))
    (not (= c_y1 b_b))
    (= c_x1 c_y1))
Inside partialInterpolantConflict
Case OCT
(ast-vector
  (<= c_y1 a_a)
  (= c_x1 a_a)
  (not (= c_x1 c_y1)))
(ast-vector
  (<= c_x1 b_b)
  (= c_y1 b_b))
DNF: (let ((a!1 (and (<= (- c_y1 a_a) 0)
                (<= (- c_x1 a_a) 0)
                (<= (+ (- c_x1) a_a) 0)
                (<= (- c_x1 c_y1) (- 1))))
      (a!2 (and (<= (- c_y1 a_a) 0)
                (<= (- c_x1 a_a) 0)
                (<= (+ (- c_x1) a_a) 0)
                (<= (+ (- c_x1) c_y1) (- 1)))))
  (or a!1 a!2))
Input for OctagonInterpolant (ast-vector
  (<= (- c_y1 a_a) 0)
  (<= (- c_x1 a_a) 0)
  (<= (+ (- c_x1) a_a) 0)
  (<= (- c_x1 c_y1) (- 1)))
Input for OctagonInterpolant (ast-vector
  (<= (- c_y1 a_a) 0)
  (<= (- c_x1 a_a) 0)
  (<= (+ (- c_x1) a_a) 0)
  (<= (+ (- c_x1) c_y1) (- 1)))
Theory-specific interpolant: (let ((a!1 (and (<= (+ (- c_x1) c_y1) 0) (<= (- c_x1 c_y1) (- 1))))
      (a!2 (and (<= (+ (- c_x1) c_y1) (- 1)))))
  (or a!1 a!2))
Interpolant for OCT: (let ((a!1 (and (<= (+ (- c_x1) c_y1) 0) (<= (- c_x1 c_y1) (- 1))))
      (a!2 (and (<= (+ (- c_x1) c_y1) (- 1)))))
  (and (or a!1 a!2 false false false) true true))
Interpolant((from conflict)new): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
Clause Id: 9 (Derived(2,8)) Predicate: (or (not (<= c_x1 b_b)) (not (= c_x1 a_a)) (not (= c_y1 b_b)) (= c_x1 c_y1)) Pivot: (<= c_y1 a_a)
Pivot is A-local
Partial interpolant (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or false a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
Interpolant((from derived)new): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
Clause Id: 10 (Derived(9,3)) Predicate: (or (= c_x1 c_y1) (not (= c_x1 a_a)) (not (= c_y1 b_b))) Pivot: (<= c_x1 b_b)
Pivot is B-local
Partial interpolant (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
  (and a!2 true)))
Interpolant((from derived)new): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
Clause Id: 11 (Derived(10,5)) Predicate: (or (= c_x1 c_y1) (not (= c_y1 b_b))) Pivot: (= c_x1 a_a)
Pivot is A-local
Partial interpolant (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)) false))
Interpolant((from derived)new): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
Clause Id: 12 (Derived(11,6)) Predicate: (= c_x1 c_y1) Pivot: (= c_y1 b_b)
Pivot is B-local
Partial interpolant (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
  (and a!2 true)))
Interpolant((from derived)new): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
  (or a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
Clause Id: 13 (Derived(12,7)) Predicate: false Pivot: (= c_x1 c_y1)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or (= c_x1 c_y1) a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
  (and a!2 (or (not (= c_x1 c_y1)) false))))
Interpolant((from derived)new): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or (= c_x1 c_y1) a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
  (and a!2 (not (= c_x1 c_y1)))))
Final interpolant for conflict clause: (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or (= c_x1 c_y1) a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
  (and a!2 (not (= c_x1 c_y1)))))

Disjunction implied in OCT: (= c_oct_1 c_oct_2)
Clause Id: 1 (Fact) Predicate: (= 0 c_oct_1) Interpolant(old): false
Clause Id: 4 (Fact) Predicate: (= 0 c_oct_2) Interpolant(old): true
Clause Id: 7 (Fact) Predicate: (not (= c_oct_1 c_oct_2)) Interpolant(new): false
Clause Id: 8 (Conflict Clause) Predicate: (or (not (= 0 c_oct_1)) (not (= 0 c_oct_2)) (= c_oct_1 c_oct_2))
Inside partialInterpolantConflict
Case OCT
-------It was sat!
(ast-vector
  (= 0 c_oct_1)
  (not (= c_oct_1 c_oct_2)))
(ast-vector
  (= 0 c_oct_2))
DNF: (let ((a!1 (and (<= c_oct_1 0)
                (<= (- c_oct_1) 0)
                (<= (+ (- c_oct_1) c_oct_2) (- 1)))))
  (or (and (<= c_oct_1 0) (<= (- c_oct_1) 0) (<= (- c_oct_1 c_oct_2) (- 1)))
      a!1))
Input for OctagonInterpolant (ast-vector
  (<= c_oct_1 0)
  (<= (- c_oct_1) 0)
  (<= (- c_oct_1 c_oct_2) (- 1)))
Input for OctagonInterpolant (ast-vector
  (<= c_oct_1 0)
  (<= (- c_oct_1) 0)
  (<= (+ (- c_oct_1) c_oct_2) (- 1)))
Theory-specific interpolant: (let ((a!1 (and (<= (- c_oct_1) 0)
                (<= c_oct_1 0)
                (<= (+ (- c_oct_2) c_oct_1) (- 1)))))
  (or a!1
      (and (<= (- c_oct_1) 0) (<= c_oct_1 0) (<= (- c_oct_2 c_oct_1) (- 1)))))
Interpolant for OCT: (let ((a!1 (and (<= (- c_oct_1) 0)
                (<= c_oct_1 0)
                (<= (+ (- c_oct_2) c_oct_1) (- 1)))))
(let ((a!2 (or a!1
               (and (<= (- c_oct_1) 0)
                    (<= c_oct_1 0)
                    (<= (- c_oct_2 c_oct_1) (- 1)))
               false
               false)))
  (and a!2 true)))
Interpolant((from conflict)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
  (or a!1 a!2))
Clause Id: 9 (Derived(1,8)) Predicate: (or (not (= 0 c_oct_2)) (= c_oct_1 c_oct_2)) Pivot: (= 0 c_oct_1)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
  (and (or (= 0 c_oct_1) false) (or (not (= 0 c_oct_1)) a!1 a!2)))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
  (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
Clause Id: 10 (Derived(9,4)) Predicate: (= c_oct_1 c_oct_2) Pivot: (= 0 c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!4 (or (not (not (= 0 c_oct_2))) true)))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2))))
  (and (or (not (= 0 c_oct_2)) a!3) a!4)))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2))))
  (or (not (= 0 c_oct_2)) a!3)))
Clause Id: 11 (Derived(10,7)) Predicate: false Pivot: (= c_oct_1 c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2))))
  (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
       (or (not (= c_oct_1 c_oct_2)) false))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2))))
  (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
       (not (= c_oct_1 c_oct_2)))))
Final interpolant for conflict clause: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2))))
  (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
       (not (= c_oct_1 c_oct_2)))))
EUF solver found a contradiction
(ast-vector
  (= (c_f c_x1) c_oct_1)
  (= c_x1 a_a)
  (= c_y1 b_b)
  (not (= (c_f c_y1) c_oct_2))
  (= c_x1 c_y1)
  (= c_oct_1 c_oct_2))
Clause Id: 1 (Fact) Predicate: (= (c_f c_x1) c_oct_1) Interpolant(old): false
Clause Id: 4 (Fact) Predicate: (not (= (c_f c_y1) c_oct_2)) Interpolant(old): true
Clause Id: 5 (Fact) Predicate: (= c_x1 c_y1) Interpolant(old): (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or (= c_x1 c_y1) a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
  (and a!2 (not (= c_x1 c_y1)))))
Clause Id: 6 (Fact) Predicate: (= c_oct_1 c_oct_2) Interpolant(old): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2))))
  (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
       (not (= c_oct_1 c_oct_2)))))
Clause Id: 7 (Conflict Clause) Predicate: (or (not (= (c_f c_x1) c_oct_1))
    (= (c_f c_y1) c_oct_2)
    (not (= c_x1 c_y1))
    (not (= c_oct_1 c_oct_2)))
Inside partialInterpolantConflict
Case EUF
Part a: (ast-vector
  (= (c_f c_x1) c_oct_1)
  (= c_x1 c_y1)
  (= c_oct_1 c_oct_2))
Part b: (ast-vector
  (not (= (c_f c_y1) c_oct_2)))
Theory-specific Interpolant for EUF: (and (= c_oct_1 (c_f c_x1)))
Interpolant for EUF: (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1))))
      (a!3 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!4 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1)))))
(let ((a!2 (or (= c_x1 c_y1) a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1))))
      (a!5 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!3 a!4))))
(let ((a!6 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!5)
                (not (= c_oct_1 c_oct_2)))))
(let ((a!7 (or (and (= c_oct_1 (c_f c_x1)))
               false
               (and a!2 (not (= c_x1 c_y1)))
               a!6)))
  (and a!7 true)))))
Interpolant((from conflict)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2)))))
  (or a!4 (= c_oct_1 (c_f c_x1)) (and a!6 (not (= c_x1 c_y1)))))))
Clause Id: 8 (Derived(1,7)) Predicate: (or (= (c_f c_y1) c_oct_2) (not (= c_x1 c_y1)) (not (= c_oct_1 c_oct_2))) Pivot: (= (c_f c_x1) c_oct_1)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2)))))
(let ((a!7 (or (not (= (c_f c_x1) c_oct_1))
               a!4
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
  (and (or (= (c_f c_x1) c_oct_1) false) a!7)))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2)))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
  (and (= (c_f c_x1) c_oct_1) a!7)))))
Clause Id: 9 (Derived(8,4)) Predicate: (or (not (= c_oct_1 c_oct_2)) (not (= c_x1 c_y1))) Pivot: (= (c_f c_y1) c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1))))
      (a!9 (or (not (= (c_f c_y1) c_oct_2)) true)))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2)))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
(let ((a!8 (or (= (c_f c_y1) c_oct_2) (and (= (c_f c_x1) c_oct_1) a!7))))
  (and a!8 a!9))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2)))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
  (or (= (c_f c_y1) c_oct_2) (and (= (c_f c_x1) c_oct_1) a!7))))))
Clause Id: 10 (Derived(9,5)) Predicate: (not (= c_oct_1 c_oct_2)) Pivot: (= c_x1 c_y1)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2))))
      (a!9 (or (not (not (= c_x1 c_y1))) (and a!6 (not (= c_x1 c_y1))))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
(let ((a!8 (or (not (= c_x1 c_y1))
               (= (c_f c_y1) c_oct_2)
               (and (= (c_f c_x1) c_oct_1) a!7))))
  (and a!8 a!9))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2))))
      (a!9 (or (= c_x1 c_y1) (and a!6 (not (= c_x1 c_y1))))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
(let ((a!8 (or (= (c_f c_y1) c_oct_2)
               (not (= c_x1 c_y1))
               (and (= (c_f c_x1) c_oct_1) a!7))))
  (and a!8 a!9))))))
Clause Id: 11 (Derived(10,6)) Predicate: false Pivot: (= c_oct_1 c_oct_2)
Pivot is AB-common
Partial interpolant: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2))))
      (a!9 (or (= c_x1 c_y1) (and a!6 (not (= c_x1 c_y1))))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1)))))
      (a!10 (or (not (not (= c_oct_1 c_oct_2))) a!4)))
(let ((a!8 (or (= (c_f c_y1) c_oct_2)
               (not (= c_x1 c_y1))
               (and (= (c_f c_x1) c_oct_1) a!7))))
  (and (or (not (= c_oct_1 c_oct_2)) (and a!8 a!9)) a!10))))))
Interpolant((from derived)new): (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2))))
      (a!9 (or (= c_x1 c_y1) (and a!6 (not (= c_x1 c_y1))))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
(let ((a!8 (or (= (c_f c_y1) c_oct_2)
               (not (= c_x1 c_y1))
               (and (= (c_f c_x1) c_oct_1) a!7))))
  (and (or (not (= c_oct_1 c_oct_2)) (and a!8 a!9))
       (or (= c_oct_1 c_oct_2) a!4)))))))
Final interpolant for conflict clause: (let ((a!1 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ (* (- 1) c_oct_2) c_oct_1) (- 1))))
      (a!2 (and (>= c_oct_1 0)
                (<= c_oct_1 0)
                (<= (+ c_oct_2 (* (- 1) c_oct_1)) (- 1))))
      (a!5 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!3 (and (= 0 c_oct_1) (or (not (= 0 c_oct_1)) a!1 a!2)))
      (a!6 (or (= c_x1 c_y1) a!5 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!4 (and (or (= c_oct_1 c_oct_2) (not (= 0 c_oct_2)) a!3)
                (not (= c_oct_1 c_oct_2))))
      (a!9 (or (= c_x1 c_y1) (and a!6 (not (= c_x1 c_y1))))))
(let ((a!7 (or a!4
               (not (= (c_f c_x1) c_oct_1))
               (= c_oct_1 (c_f c_x1))
               (and a!6 (not (= c_x1 c_y1))))))
(let ((a!8 (or (= (c_f c_y1) c_oct_2)
               (not (= c_x1 c_y1))
               (and (= (c_f c_x1) c_oct_1) a!7))))
  (and (or (not (= c_oct_1 c_oct_2)) (and a!8 a!9))
       (or (= c_oct_1 c_oct_2) a!4)))))))
-> Final Interpolant: (let ((a!1 (and (<= (+ (* (- 1) c_x1) c_y1) 0)
                (<= (+ c_x1 (* (- 1) c_y1)) (- 1)))))
(let ((a!2 (or (= c_x1 c_y1) a!1 (<= (+ (* (- 1) c_x1) c_y1) (- 1)))))
(let ((a!3 (or (not (= (c_f c_x1) 0))
               (= 0 (c_f c_x1))
               (and a!2 (not (= c_x1 c_y1)))))
      (a!5 (or (= c_x1 c_y1) (and a!2 (not (= c_x1 c_y1))))))
(let ((a!4 (or (not (= c_x1 c_y1)) (= (c_f c_y1) 0) (and (= (c_f c_x1) 0) a!3))))
  (and a!4 a!5)))))
Interpolant:
(let ((a!1 (and (<= (+ (* (- 1) x1) y1) 0) (<= (+ x1 (* (- 1) y1)) (- 1)))))
(let ((a!2 (or (= x1 y1) a!1 (<= (+ (* (- 1) x1) y1) (- 1)))))
(let ((a!3 (or (not (= (f x1) 0)) (= 0 (f x1)) (and a!2 (not (= x1 y1)))))
      (a!5 (or (= x1 y1) (and a!2 (not (= x1 y1))))))
(let ((a!4 (or (not (= x1 y1)) (= (f y1) 0) (and (= (f x1) 0) a!3))))
  (and a!4 a!5)))))
rm -rf tests/*.o tests/basic_test
