;(set-option :produce-unsat-cores true)
(set-info :status unknown)
(declare-sort ElementSort 0)
 (declare-sort ArraySort 0)
 (declare-fun e3 () ElementSort)
(declare-fun rd (ArraySort Int) ElementSort)
(declare-fun i3 () Int)
(declare-fun a () ArraySort)
(declare-fun i1 () Int)
(declare-fun fresh_array_0 () ArraySort)
(declare-fun e1 () ElementSort)
(declare-fun b () ArraySort)
(declare-fun c2 () ArraySort)
(declare-fun c1 () ArraySort)
(declare-fun fresh_index_1 () Int)
(declare-fun fresh_index_2 () Int)
(declare-fun i2 () Int)

(assert (and
(distinct (rd c2 fresh_index_1) (rd c1 fresh_index_1))
  (= fresh_index_1 i3)
  (= fresh_index_1 i1)
  (<= fresh_index_1 i1)
  (<= fresh_index_1 i1)
  (>= fresh_index_1 fresh_index_2)
  (distinct (rd c2 fresh_index_1) (rd c1 fresh_index_1))
  (distinct fresh_index_1 fresh_index_2)
  (distinct (rd c2 fresh_index_2) (rd c1 fresh_index_2))
  (= fresh_index_2 i3)
  (= fresh_index_2 i1)
  (<= fresh_index_2 i1)
  (<= fresh_index_2 i1)
  (>= i1 0)
))

(assert (and
(> i2 i1)
  (> i3 i2)
  (distinct (rd c1 i2) (rd c2 i2))
  (= (rd c2 i2) (rd c1 i2))
  (= (rd c2 i2) (rd c1 i2))
))

(check-sat)
