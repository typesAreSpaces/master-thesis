(declare-sort ArraySort 0)
(declare-sort ElementSort 0)

(declare-fun a () ArraySort)
(declare-fun b () ArraySort)
(declare-fun c1 () ArraySort)
(declare-fun c2 () ArraySort)
(declare-fun fresh_array_0 () ArraySort)
(declare-fun fresh_array_1 () ArraySort)
(declare-fun fresh_array_2 () ArraySort)
(declare-fun fresh_index_0 () Int)
(declare-fun fresh_index_1 () Int)
(declare-fun fresh_index_2 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun rd (ArraySort Int) ElementSort)

(define-fun part_a () Bool (and
  (distinct (rd c2 fresh_index_1) (rd c1 fresh_index_1))
  (= fresh_index_1 i3)
  (= fresh_index_1 i1)
  (<= fresh_index_1 i1)
  (<= fresh_index_1 i1)
  (>= fresh_index_1 fresh_index_2)
  (distinct (rd c2 fresh_index_1) (rd c1 fresh_index_1))
  (distinct fresh_index_1 fresh_index_2)
  (distinct (rd c2 fresh_index_2) (rd c1 fresh_index_2))
  (= (rd a fresh_index_2) (rd fresh_array_0 fresh_index_2))
  (= fresh_index_2 i1)
  (= (rd c2 fresh_index_2) (rd b fresh_index_2))
  (= (rd c1 fresh_index_2) (rd a fresh_index_2))
  (>= i1 0))
)

(define-fun interp () Bool (not (= fresh_index_1 fresh_index_2)))

(assert (not (implies part_a interp)))
(check-sat)
