#include "Bound.h"

Bound::Bound(bool is_positive) : 
  is_infinite(true), 
  is_positive(is_positive), 
  bound_value(0)
{
}

Bound::Bound(BoundValue bound_value) :
  is_infinite(false), 
  is_positive(bound_value < 0 ? false : true),
  bound_value(bound_value)
{
}

void Bound::normalize(BoundValue scale_factor){
  if(is_infinite)
    return;
  bound_value /= scale_factor; // TODO: double check this considering signs
}

Bound operator + (Bound const & b1, Bound const & b2){
  if(b1.is_infinite || b2.is_infinite){
    if(b1.is_positive || b2.is_positive)
      return Bound(true);

    return Bound(false);
  }
  return Bound(b1.bound_value + b2.bound_value);
}

Bound operator - (Bound const & b1, Bound const & b2){
  if(b1.is_infinite || b2.is_infinite){
    // If - inf - (+ inf) = -inf
    if(!b1.is_positive && b2.is_positive)
      return Bound(false);

    // The outcome of the rest of the case
    // is + inf since there is at least one
    // + inf on one side 
    // (or created by the difference)
    return Bound(true);
  }
  return Bound(b1.bound_value - b2.bound_value);
}

bool operator ==(Bound const & b1, Bound const & b2){
  return b1.bound_value == b2.bound_value 
    && b1.is_infinite == b2.is_infinite 
    && b1.is_positive == b2.is_positive;
}

bool operator !=(Bound const & b1, Bound const & b2){
  return b1.bound_value != b2.bound_value 
    || b1.is_infinite != b2.is_infinite 
    || b1.is_positive != b2.is_positive;
}

bool operator < (Bound const & b1, Bound const & b2){
  return true;
}

bool operator <=(Bound const & b1, Bound const & b2){
  return true;
}

bool operator > (Bound const & b1, Bound const & b2){
  return true;
}

bool operator >=(Bound const & b1, Bound const & b2){
  return true;
}

std::ostream & operator << (std::ostream & os, Bound const & bound){
  if(bound.is_infinite){
    return os << "<= " << (bound.is_positive ? "+" : "-") << "inf";
  }
  return (os << "<= " << bound.bound_value);
}
