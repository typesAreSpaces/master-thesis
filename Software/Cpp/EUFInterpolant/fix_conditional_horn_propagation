let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Documents/GithubProjects/master-thesis/Software/Cpp/EUFInterpolant
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +61 src/EUFInterpolant-conditionalEliminationHcs.cpp
badd +1 src/EUFInterpolant.cpp
badd +1 src/EUFInterpolant-conditionalEliminationEqs.cpp
badd +3 include/Explanation.h
badd +24 include/Input.h
badd +155 tests/current_progress.cpp
badd +132 src/HornClauses.cpp
badd +6 src/Input.cpp
badd +20 include/HornClauses.h
badd +22 include/EUFInterpolant.h
badd +1 tests/current_progress
badd +13 src/Rename.cpp
badd +9 include/EUFInterpolantWithExpressions.h
badd +7 src/EUFInterpolantWithExpressions.cpp
badd +6 include/Rename.h
badd +16 include/DisequalitiesFlattener.h
badd +6 src/DisequalitiesFlattener.cpp
badd +0 src/RenameWithUncomSymbols.cpp
badd +0 src/RenameWithExpressions.cpp
badd +94 src/Hornsat.cpp
badd +9 include/Hornsat.h
argglobal
%argdel
$argadd src/EUFInterpolant-conditionalEliminationHcs.cpp
edit include/DisequalitiesFlattener.h
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 1resize ' . ((&columns * 51 + 156) / 313)
exe '2resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 2resize ' . ((&columns * 52 + 156) / 313)
exe '3resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 3resize ' . ((&columns * 51 + 156) / 313)
exe '4resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 4resize ' . ((&columns * 51 + 156) / 313)
exe '5resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 5resize ' . ((&columns * 52 + 156) / 313)
exe '6resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 6resize ' . ((&columns * 51 + 156) / 313)
exe '7resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 7resize ' . ((&columns * 52 + 156) / 313)
exe '8resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 8resize ' . ((&columns * 51 + 156) / 313)
exe '9resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 9resize ' . ((&columns * 104 + 156) / 313)
exe '10resize ' . ((&lines * 3 + 42) / 85)
exe 'vert 10resize ' . ((&columns * 51 + 156) / 313)
exe '11resize ' . ((&lines * 79 + 42) / 85)
exe 'vert 11resize ' . ((&columns * 51 + 156) / 313)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 9 - ((1 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
9
normal! 0
wincmd w
argglobal
if bufexists("include/Rename.h") | buffer include/Rename.h | else | edit include/Rename.h | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 27 - ((9 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
27
normal! 041|
wincmd w
argglobal
if bufexists("include/Rename.h") | buffer include/Rename.h | else | edit include/Rename.h | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 32 - ((10 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
32
normal! 063|
wincmd w
argglobal
if bufexists("src/DisequalitiesFlattener.cpp") | buffer src/DisequalitiesFlattener.cpp | else | edit src/DisequalitiesFlattener.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 49 - ((35 * winheight(0) + 32) / 64)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
49
normal! 0
wincmd w
argglobal
if bufexists("src/RenameWithUncomSymbols.cpp") | buffer src/RenameWithUncomSymbols.cpp | else | edit src/RenameWithUncomSymbols.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 11 - ((10 * winheight(0) + 32) / 64)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
11
normal! 0
wincmd w
argglobal
if bufexists("src/RenameWithExpressions.cpp") | buffer src/RenameWithExpressions.cpp | else | edit src/RenameWithExpressions.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 11 - ((10 * winheight(0) + 32) / 64)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
11
normal! 035|
wincmd w
argglobal
if bufexists("src/EUFInterpolant.cpp") | buffer src/EUFInterpolant.cpp | else | edit src/EUFInterpolant.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 10 - ((9 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
10
normal! 08|
wincmd w
argglobal
if bufexists("include/EUFInterpolant.h") | buffer include/EUFInterpolant.h | else | edit include/EUFInterpolant.h | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 10 - ((9 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
10
normal! 030|
wincmd w
argglobal
if bufexists("src/EUFInterpolantWithExpressions.cpp") | buffer src/EUFInterpolantWithExpressions.cpp | else | edit src/EUFInterpolantWithExpressions.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 6 - ((5 * winheight(0) + 32) / 64)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
6
normal! 0
wincmd w
argglobal
enew
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
wincmd w
argglobal
if bufexists("tests/current_progress.cpp") | buffer tests/current_progress.cpp | else | edit tests/current_progress.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 161 - ((55 * winheight(0) + 39) / 79)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
161
normal! 06|
wincmd w
11wincmd w
exe '1resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 1resize ' . ((&columns * 51 + 156) / 313)
exe '2resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 2resize ' . ((&columns * 52 + 156) / 313)
exe '3resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 3resize ' . ((&columns * 51 + 156) / 313)
exe '4resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 4resize ' . ((&columns * 51 + 156) / 313)
exe '5resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 5resize ' . ((&columns * 52 + 156) / 313)
exe '6resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 6resize ' . ((&columns * 51 + 156) / 313)
exe '7resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 7resize ' . ((&columns * 52 + 156) / 313)
exe '8resize ' . ((&lines * 18 + 42) / 85)
exe 'vert 8resize ' . ((&columns * 51 + 156) / 313)
exe '9resize ' . ((&lines * 64 + 42) / 85)
exe 'vert 9resize ' . ((&columns * 104 + 156) / 313)
exe '10resize ' . ((&lines * 3 + 42) / 85)
exe 'vert 10resize ' . ((&columns * 51 + 156) / 313)
exe '11resize ' . ((&lines * 79 + 42) / 85)
exe 'vert 11resize ' . ((&columns * 51 + 156) / 313)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFIc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
