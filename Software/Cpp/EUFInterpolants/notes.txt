- EUFInterpolant.h
  vector<HornClause*> (collection of Horn Clauses)
  - HornClauses.h		
  	vector<HornClause*> (collection of Horn Clauses)
	- HornClause.h
	  equality := pair<Vertex*, Vertex*> [consequent]
	  vector<equality> (ANDS) [antecedent]
	  vector<Vertex*> [global_terms]
	  
- TODOs:
  - Add to the EUF::algorithm() answer the Horn Clauses of Type 1
  - Check why EUF::exponentialElimination() keeps previous
    Horn clauses

- Important pieces of code that helped to understand
  some aspects of z3:

 // // ---------------------------------------------------------
 // // The following code shows how to construct
 // // new terms using the z3++ api. We notice
 // // the context does not allow symbol duplication
 // // Test used:
 // // "./tests/smt2lib_2/kapurEUFExample2_4.smt2"
 // // ---------------------------------------------------------
 // z3::sort _sort = ctx.uninterpreted_sort("A");
 // z3::expr x = ctx.constant("x1", _sort);
 // z3::func_decl f = z3::function("f", _sort, _sort, _sort);
 // z3::expr f_x_x = f(x, x);
 // std::cout << "Input formula\n";
 // std::cout << input_formula_expr << std::endl;
 // std::cout << x << std::endl;
 // // Obtaining the ids of the 'new expressions'
 // // show that the Z3 manager doesn't create a
 // // new node for them when they have already
 // // been created
 // std::cout << "Ids" << std::endl;
 // std::cout << Z3_get_ast_id(ctx, x) << std::endl;
 // std::cout << f_x_x << std::endl;
 // std::cout << Z3_get_ast_id(ctx, f_x_x) << std::endl;

// // ---------------------------------------------------------
// // The following code shows how to construct
// // new terms using the z3++ api. We notice
// // the context does not allow symbol duplication
// // Test used:
// // "./tests/smt2lib_2/kapurEUFExample2_5.smt2"
// // ---------------------------------------------------------
// z3::sort _sort = ctx.uninterpreted_sort("A");
// z3::sort_vector _sorts(ctx);
// _sorts.push_back(_sort), _sorts.push_back(_sort), _sorts.push_back(_sort);
// z3::func_decl f  = z3::function("f", _sorts, _sort);
// z3::expr x1 = ctx.constant("x1", _sort);
// z3::expr f_x1_x1_x1 = f(x1, x1, x1);
// z3::expr x2 = ctx.constant("x2", _sort);
// z3::expr f_x1_x2_x1 = f(x1, x2, x1);

// std::cout << f_x1_x1_x1 << std::endl;
// std::cout << Z3_get_ast_id(ctx, f_x1_x1_x1) << std::endl;
// std::cout << f_x1_x2_x1 << std::endl;
// std::cout << Z3_get_ast_id(ctx, f_x1_x2_x1) << std::endl;
// std::cout << x2 << std::endl;
// std::cout << Z3_get_ast_id(ctx, x2) << std::endl;

// // // Example using substitution
// // A Vector of (from) and a Vector of (to)
// // are needed
// z3::sort _sort = ctx.uninterpreted_sort("A");
// z3::expr v = ctx.constant("v", _sort);
// z3::expr w = ctx.constant("wa1", _sort);
// z3::expr u = ctx.constant("wa2", _sort);
// z3::expr_vector v_vector(ctx);
// z3::expr_vector w_vector(ctx);
// w_vector.push_back(w);

// v_vector.push_back(v);
// std::cout << input_formula_expr << std::endl;
// std::cout << input_formula_expr.substitute(v_vector, w_vector) << std::endl;
// w_vector.pop_back();
// w_vector.push_back(u);
// std::cout << input_formula_expr.substitute(v_vector, w_vector) << std::endl;
