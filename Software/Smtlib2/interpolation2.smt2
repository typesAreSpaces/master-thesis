(set-option :produce-unsat-cores true)
(declare-sort A)
(declare-fun f (A) A)
(declare-fun x1 () A)
(declare-fun x2 () A)
(declare-fun x3 () A)
(declare-fun y1 () A)
(declare-fun y2 () A)
(declare-fun y3 () A)
(declare-fun z1 () A)
(declare-fun z2 () A)
(declare-fun z3 () A)
(declare-fun z4 () A)

(push)
;; ---------------------------------
;; A part
(assert (= z1 x1))
(assert (= x1 z2))
(assert (= z2 x2))
(assert (= x2 (f z3)))
(assert (= (f z3) x3))
(assert (= x3 z4))
(assert (= (f z2) x2))
(assert (= x2 z3))
;; ---------------------------------
;; B part
(assert (= z1 y1))
(assert (= y1 (f z2)))
(assert (= (f z2) y2))
(assert (= y2 z3))
(assert (= z3 y3))
(assert (= z2 y2))
(assert (= y2 (f z3)))
(assert (not (= y3 z4)))
(check-sat)
(pop)

(push)
;; ---------------------------------
;; A-Interpolant
(assert (! (= z2 z1) :named a1))
(assert (! (= (f z1) z1) :named a2))
(assert (! (= z4 z1) :named a3))
(assert (! (= z3 z1) :named a4))
;; ---------------------------------
;; B part
(assert (! (= z1 y1) :named b1))
(assert (! (= y1 (f z2)) :named b2))
(assert (! (= (f z2) y2) :named b3))
(assert (! (= y2 z3) :named b4))
(assert (! (= z3 y3) :named b5))
(assert (! (= z2 y2) :named b6))
(assert (! (= y2 (f z3)) :named b7))
(assert (! (not (= y3 z4)) :named b8))
(check-sat)
(echo "The unsat core is:")
(get-unsat-core)
(pop)
